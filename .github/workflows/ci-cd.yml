name: Lexicon Desktop CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'

jobs:
  # Comprehensive Quality Assurance
  quality-assurance:
    runs-on: ubuntu-latest
    name: üß™ Quality Assurance
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Code linting
        run: npm run lint
        
      - name: TypeScript type checking
        run: npx tsc --noEmit
        
      - name: Run test suite
        run: npm run test:run
        
      - name: Generate test coverage
        run: npm run test:coverage
        
      - name: Build frontend for production
        run: npm run build
        
      - name: Validate Tauri configuration
        run: npx @tauri-apps/cli info
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: lexicon-coverage

  # macOS Desktop App Builds
  build-macos:
    needs: quality-assurance
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: 'aarch64-apple-darwin'
            name: 'macOS-Apple-Silicon'
            arch: 'arm64'
          - target: 'x86_64-apple-darwin'
            name: 'macOS-Intel'
            arch: 'x64'
            
    runs-on: macos-latest
    name: üçé Build ${{ matrix.name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build and release macOS app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Lexicon ${{ github.ref_name }} - ${{ matrix.name }}'
          releaseBody: |
            # üìö Lexicon Desktop App ${{ github.ref_name }}
            
            **Universal RAG Dataset Preparation Tool for ${{ matrix.name }}**
            
            ## üöÄ Installation Instructions (macOS)
            
            1. **Download** the `.dmg` file below
            2. **Mount** the disk image by double-clicking
            3. **Drag** Lexicon.app to your Applications folder
            4. **Important**: Right-click Lexicon.app ‚Üí select "Open" to bypass Gatekeeper (unsigned app)
            5. **Confirm** by clicking "Open" when prompted about developer verification
            
            ## ‚ú® Features in This Release
            
            - üîÑ **Offline-first desktop application** with service worker caching
            - üìñ **Advanced book processing** with intelligent chunking strategies
            - ‚ôø **Enterprise accessibility** with comprehensive WCAG compliance
            - üîí **Production security** with session management and monitoring
            - üñºÔ∏è **Progressive image loading** with responsive optimization
            - üìä **Real-time performance monitoring** and quality analysis
            
            ## üíª System Requirements
            
            - **macOS 10.15+** (Catalina or later)
            - **4GB RAM** minimum, 8GB recommended
            - **2GB free disk space** for application and processing
            - **Architecture**: ${{ matrix.arch }} (${{ matrix.name }})
            
            ## üÜò Troubleshooting
            
            If you see "App can't be opened" error:
            1. Go to **System Preferences** ‚Üí **Security & Privacy**
            2. Click **"Open Anyway"** next to the Lexicon warning
            3. Or use Terminal: `xattr -cr /Applications/Lexicon.app`
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}

  # Windows Desktop App Build
  build-windows:
    needs: quality-assurance
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: windows-latest
    name: üñ•Ô∏è Build Windows
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build and release Windows app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Lexicon ${{ github.ref_name }} - Windows'
          releaseBody: |
            # üìö Lexicon Desktop App ${{ github.ref_name }}
            
            **Universal RAG Dataset Preparation Tool for Windows**
            
            ## üöÄ Installation Instructions (Windows)
            
            1. **Download** the `.msi` installer below
            2. **Run** the installer (may show "Unknown publisher" warning)
            3. **Choose** "More info" ‚Üí "Run anyway" if Windows Defender appears
            4. **Follow** the installation wizard
            5. **Launch** from Start Menu or Desktop shortcut
            
            ## ‚ú® Features in This Release
            
            - üîÑ **Offline-first desktop application** with service worker caching
            - üìñ **Advanced book processing** with intelligent chunking strategies
            - ‚ôø **Enterprise accessibility** with comprehensive WCAG compliance
            - üîí **Production security** with session management and monitoring
            - üñºÔ∏è **Progressive image loading** with responsive optimization
            - üìä **Real-time performance monitoring** and quality analysis
            
            ## üíª System Requirements
            
            - **Windows 10 1903+** or **Windows 11**
            - **4GB RAM** minimum, 8GB recommended
            - **2GB free disk space** for application and processing
            - **x64 architecture** (64-bit)
            
            ## üÜò Troubleshooting
            
            If Windows Defender blocks installation:
            1. Click **"More info"** on the warning dialog
            2. Click **"Run anyway"** to proceed with installation
            3. Or temporarily disable Windows Defender during installation
          releaseDraft: false
          prerelease: false

  # Security & Performance Audits
  security-audit:
    needs: quality-assurance
    runs-on: ubuntu-latest
    name: üîí Security Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security audit (allow moderate issues)
        run: npm audit --audit-level high || true
        
      - name: Check Tauri security configuration
        run: npx @tauri-apps/cli info

  # Component Documentation Deployment
  deploy-docs:
    needs: quality-assurance
    runs-on: ubuntu-latest
    name: üìö Deploy Documentation
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Storybook documentation
        run: npm run build-storybook
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: docs
